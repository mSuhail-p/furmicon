<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Form</title>
    <!-- Include Bootstrap for styling and jQuery for easier DOM manipulation -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
    <style>
        .error {
            color: red;
            font-size: 0.9em;
        }
    </style>
</head>


<body style="background: #c8c8c8;">

    <div class="container w-50 border border-info-subtle bg-light border rounded rounded-bottom-circle   mt-5">
        <h4 class="text-center ">ADD PRODUCT</h4>
        <form action="/admin/add_product" method="POST" id="productForm" enctype="multipart/form-data">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" class="form-control" id="name" name="name">
                <div id="nameError" class="error"></div>
            </div>



            <div class="form-group">
                <label for="category">Category:</label>
                <select class="form-control" id="category" name="category">
                    <option value="">Select Category</option>
                    <% categories.forEach(element=> { %>
                        <option value="<%= element._id %>">
                            <%= element.name %>
                        </option>
                        <% }) %>
                </select>
                <div id="categoryError" class="error"></div>
            </div>



            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" class="form-control" id="price" name="price">
                <div id="priceError" class="error"></div>
            </div>
            <div class="form-group">
                <label for="quantity">Quantity:</label>
                <input type="number" class="form-control" id="quantity" name="quantity">
                <div id="quantityError" class="error"></div>
            </div>


            <div class="y mb-4">
                <label for="offer">New Offer :</label>
                <% if (offer.length> 0) { %>
                    <button type="button" onclick="modalOpen(<%= JSON.stringify(offer) %>)" class="btn btn-primary"
                        id="openModalButton" data-toggle="modal" data-target="#exampleModal">
                        Click here
                    </button>
                    <% } %>

            </div>


            <div class="form-group">
                <label for="images">Images:</label>
                <input type="file" class="form-control " id="images" name="images[]" multiple>
                <div id="imagesError" class="error"></div>
                <div id="imagePreview" class="mt-3"></div>
            </div>
            <div class="form-group">
                <label for="description">Description:</label>
                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                <div id="descriptionError" class="error"></div>
            </div>


            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>



    <!-- Offer modal starts form here -->



    <!-- The Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Select an Offer</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalBody">
                    <!-- Dynamic content will be added here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" id="saveButton">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>


    <script>

        let offerid;

        document.getElementById('productForm').addEventListener('submit', function (event) {

            const hiddenInput = document.createElement('input');
            hiddenInput.type = offerid
          
            // Append hidden input to the form
            event.target.appendChild(hiddenInput)

        })


        function modalOpen(offer) {


            setTimeout(() => {
                let b = document.getElementById('addOffer').value
                console.log(b, 'it fuldfksd')
            }, 5000)


            console.log('offer[1].offerName')
            console.log(offer)
            const openModalButton = document.getElementById('openModalButton');
            const modalBody = document.getElementById('modalBody');
            const saveButton = document.getElementById('saveButton');

            // Clear the modal body first
            modalBody.innerHTML = '';

            // Populate the modal with cards
            offer.forEach((item, index) => {
                console.log(item.offerName)
                const card = document.createElement('div');
                card.className = 'card';
                card.innerHTML = `
    <div class="card-body">
        <h5 class="card-title">${item.offerName}</h5>
        <p class="card-text">${item.offPercentage}% off</p>
        <input type="checkbox" name="options" value="${item._id}" class="single-checkbox">
    </div>
`;
                modalBody.appendChild(card);
            });

            // Ensure only one checkbox is selected at a time
            const checkboxes = modalBody.querySelectorAll('.single-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    checkboxes.forEach(box => {
                        if (box !== this) box.checked = false;
                    });
                });
            });
            const selectedCheckbox = document.querySelector('.single-checkbox:checked');
            console.log(selectedCheckbox, 'checkb0xe')


            saveButton.addEventListener('click', function () {
                const selectedCheckbox = document.querySelector('.single-checkbox:checked');
                if (selectedCheckbox) {
                    const selectedValue = selectedCheckbox.value;
                    offerid = selectedValue




                } else {
                    console.log('No option selected.');
                }


            });
        }
        // });
    </script>






    <script>
        $(document).ready(function () {
            var croppies = [];
            var fileCount = 0;

            $('#images').on('change', function (event) {
                var files = event.target.files;
                var imagePreview = $('#imagePreview');
                imagePreview.empty(); // Clear previous image previews
                croppies = []; // Reset croppies array

                if (files.length > 4) {
                    showError('imagesError', 'You can only select up to 4 images.');
                    this.value = ''; // Clear the file input
                    return;
                }

                for (var i = 0; i < files.length; i++) {
                    if (!files[i].type.startsWith('image/')) {
                        showError('imagesError', 'Only image files are allowed.');
                        this.value = ''; // Clear the file input
                        return;
                    }

                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var img = $('<img>').attr('src', e.target.result).addClass('img-thumbnail mr-2 mb-2');
                        imagePreview.append(img);

                        var croppie = new Croppie(img[0], {
                            viewport: { width: 200, height: 200 },
                            boundary: { width: 300, height: 300 },
                            showZoomer: true
                        });
                        croppies.push(croppie);
                    };
                    reader.readAsDataURL(files[i]);
                }

                if (files.length < 3) {
                    showError('imagesError', 'You must select at least 3 images.');
                    this.value = ''; // Clear the file input
                    return;
                }

                clearError('imagesError');
                fileCount = files.length;
            });

            function showError(elementId, message) {
                $('#' + elementId).text(message);
            }

            function clearError(elementId) {
                $('#' + elementId).text('');
            }

            $('#productForm').on('submit', function (event) {
                event.preventDefault();

                var valid = true;

                var name = $('#name').val().trim();
                var category = $('#category').val();
                var price = $('#price').val().trim();
                var quantity = $('#quantity').val().trim();
                var description = $('#description').val().trim();

                if (name === '') {
                    showError('nameError', 'Name is required.');
                    valid = false;
                } else {
                    clearError('nameError');
                }

                if (category === '') {
                    showError('categoryError', 'Category is required.');
                    valid = false;
                } else {
                    clearError('categoryError');
                }

                if (price === '' || price < 0) {
                    showError('priceError', 'Price must be a positive number.');
                    valid = false;
                } else {
                    clearError('priceError');
                }

                if (quantity === '' || quantity < 0) {
                    showError('quantityError', 'Quantity must be zero or a positive number.');
                    valid = false;
                } else {
                    clearError('quantityError');
                }

                if (fileCount < 3 || fileCount > 4) {
                    showError('imagesError', 'You must select between 3 and 4 images.');
                    valid = false;
                } else {
                    clearError('imagesError');
                }

                if (description === '') {
                    showError('descriptionError', 'Description is required.');
                    valid = false;
                } else {
                    clearError('descriptionError');
                }

                if (valid) {
                    var croppedImages = [];
                    var processedCount = 0;

                    croppies.forEach(function (croppie) {
                        croppie.result('blob').then(function (blob) {
                            croppedImages.push(blob);
                            processedCount++;

                            if (processedCount === croppies.length) {
                                var formData = new FormData();
                                formData.append('name', name);
                                formData.append('category', category);
                                formData.append('price', price);
                                formData.append('quantity', quantity);
                                formData.append('description', description);
                                croppedImages.forEach(function (croppedImage, index) {
                                    formData.append('croppedImages[]', croppedImage, 'image' + index + '.png');
                                });

                                $.ajax({
                                    url: '/admin/add_product',
                                    type: 'POST',
                                    data: formData,
                                    processData: false,
                                    contentType: false,
                                    success: function (response) {
                                        // alert('Product added successfully!');
                                        window.location.href = '/admin/product'
                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        alert('Error adding product: ' + errorThrown);
                                    }
                                });
                            }
                        });
                    });
                }
            });
        });
    </script>
</body>

</html>